# parser/readme.txt by Jonathan Foote (Head Rotor at rotorbrain.com)
# for the SWARM project www.orbswarm.com September 2007

This directory contains source file for the SPU scanner. This parser
takes incoming commands for each orb robot and parses them into
various actions.


After examining parser generators like lex/YACC, flex/Bison, and
re2c, we are going with the "lemon" parser generator because it is
small, fast, reentrant, and can be easily configured as a "push"
parser (that is, we send it the data to be parsed rather than having
it read it from a stream).  The lemon parser is available here: 
http://www.hwaci.com/sw/lemon/


Files in this dir are adapted from the tutorial examples from here:
http://freshmeat.net/articles/view/1270/



Files:

lemon.c : the parser generator source. Compile with gcc -o lemon lemon.c in any architecture. 

scan.y: a scanner specification (Lemon input)

scanfrontend.c: contains the main() and code to test the parser
generated by scan.y. It is concatenated with scan.c (Lemon output) and
compiled to give a test program that reads from stdin.  See the
Makefile.


testharness.c : a test wrapper that takes stdin and puts it into the scanner, and writes debug & parsed output to stdout. To test, "cat bigtestinput | testharness"

dispatcher.c: the main loop. Takes input from COM2 and parses it using the scanner, dispatches it to COM3 or COM5 depending on whether it's a LED/sound or MCU command 
serial.c:    Serial routines for reading and writing SPU com ports
spuutils.c   Misc. support routines for the spu

LOCAL COMPILING:

If you compile with the Makefile.local ("make -f Makefile.local
dispatcher") then it should compile and run on any reasonable linux
arch (only tested with cygwin though!) It #defines the preprocessor
directive LOCAL to conditionally compile alternate SPU-independent
code. If you add code it might be a good idea to test it on your own
machine.  WARNING: you must "make clean" before changing
makefiles. It's not clever enough to get rid of .o files from the
wrong architecture! 

When compiling locally, COM ports are simulated with files; filenames
are hardwired into serial.c. Right now they are

"bigtestinput" (input for com2)
"com5out" (what would come out of com5, i.e. motor controller commands)
"com3out" (what would come out of com3, i.e. LED/sound commands)
