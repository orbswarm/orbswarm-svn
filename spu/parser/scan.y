/* 
  lemon scanner for spu commands
*/

%token_type {int}  
   
   
%include {   
#include <stdio.h>
#include <stdlib.h>
#include <string.h> /* for memset *. */
#include "scan.h"   /* generated by lemon */
#include "scanner.h" /* NOT generated by lemon: func protos */

/* these hold incoming command strings */
char mcu_cmd[BUFLENGTH];
char led_cmd[BUFLENGTH];
char spu_cmd[BUFLENGTH];
int spuAddr = 0;


}  
   
%syntax_error {  
  printf("Syntax error at token\n");
}   

%right DIGIT.

expr ::= CMD_START spuAddr ws mcu_cmd cmd_end.   { 
  //printf("Got MCU command\n");
}
expr ::= CMD_START spuAddr ws spu_cmd cmd_end.   { 
  //printf("Got SPU command\n");
}
expr ::= CMD_START spuAddr ws led_cmd cmd_end.   { 
  //printf("Got led command\n");
}

 /* find end of command; ignore any whitespace at end */
cmd_end ::= CMD_END.
cmd_end ::= CMD_END ws.

/* accumulate arbitrary lengths of whitespace */
ws ::= WS. 
ws ::= WS ws.

/* spu address is one or more digits. Accumulate'em */
spuAddr ::= DIGIT(A).          {accumAddrDigit(A); } 
spuAddr ::= spuAddr DIGIT(A).  {accumAddrDigit(A); } 

/* Motor control string is one or more chars and numerals */
mcu_str ::= MCU_START(A).      { accumMCUCmd(A,1); } 
mcu_str ::= mcu_str CHAR(A) .  { accumMCUCmd(A,0); }
mcu_str ::= mcu_str DIGIT(A) . { accumMCUCmd(A,0); }
mcu_cmd ::= mcu_str MCU_END(A).{ 
  accumMCUCmd(A,0);
  dispatchMCUCmd(spuAddr,mcu_cmd);
} 

/* Sound/LED control string is like mcu plus whitespace*/
led_str ::= LED_START(A).      { accumLEDCmd(A,1); } 
led_str ::= led_str CHAR(A).   { accumLEDCmd(A,0); } 
led_str ::= led_str DIGIT(A).  { accumLEDCmd(A,0); } 
led_str ::= led_str WS(A).     { accumLEDCmd(A,0); }  
led_cmd ::= led_str LED_END(A).   { 
  accumLEDCmd(A,0);
  dispatchLEDCmd(spuAddr,led_cmd);
} 

/* SPU control str is like LED with different delimiter*/
spu_str ::= SPU_START(A).      { accumSPUCmd(A,1); } 
spu_str ::= spu_str CHAR(A).   { accumSPUCmd(A,0); } 
spu_str ::= spu_str DIGIT(A).  { accumSPUCmd(A,0); } 
spu_str ::= spu_str WS(A).     { accumSPUCmd(A,0); }  
spu_cmd ::= spu_str SPU_END(A).   { 
  accumSPUCmd(A,0);
  dispatchSPUCmd(spuAddr,spu_cmd);
} 




