MCU = atmega640
F_CPU = 14700000
SVN_TRUNK = c:/trunk

MYSRC = $(SVN_TRUNK)/aggr/src
MYBIN = $(SVN_TRUNK)/aggr/binaries
#TARGET=blinky_test
TARGET=uart_test
#TARGET=swarm_queues_test
#TARGET=simple_uart_test

# Default target.
all: 	begin gccversion \
	$(MYBIN)/$(TARGET).hex \
	finished end

#program-src: $(TARGET).hex

# Programming support using avrdude. Settings and variables.

#####AVRDUDE saection for the arduino
ARDUINO_UPLOAD_RATE = 19200
ARDUINO_AVRDUDE=avrdude
ARDUINO_AVRDUDE_PROGRAMMER = stk500
ARDUINO_AVRDUDE_PORT = /dev/tty.usbserial-A1000fOr
ARDUINO_AVRDUDE_WRITE_FLASH = -U flash:w:$(MYBIN)/$(TARGET).hex
ARDUINO_AVRDUDE_FLAGS = -F -p $(MCU) -P $(ARDUINO_AVRDUDE_PORT) -c $(ARDUINO_AVRDUDE_PROGRAMMER) \
  -b $(ARDUINO_UPLOAD_RATE)
ARDUINO_FORMAT = ihex 		# create a .hex file

arduino_upload: $(MYBIN)/$(TARGET).hex 
	$(ARDUINO_AVRDUDE) $(ARDUINO_AVRDUDE_FLAGS) $(ARDUINO_AVRDUDE_WRITE_FLASH)


########AVRDUDE section for the stk500
###programming mode is ISP
###set up is usb --> keyspan --> stk DB9 
AVRDUDE=avrdude
AVRDUDE_PROGRAMMER = stk500v2
#AVRDUDE_PORT = /dev/tty.USA19H1b1P1.1
#AVRDUDE_PORT = /dev/tty.usbserial-ftDDKSD7
AVRDUDE_PORT = COM7
UPLOAD_RATE = 115200
AVRDUDE_WRITE_FLASH = -U flash:w:$(MYBIN)/$(TARGET).hex:i
#AVRDUDE_FLAGS = -v -e -p $(MCU) -b $(UPLOAD_RATE) -P $(AVRDUDE_PORT) \
#	-c $(AVRDUDE_PROGRAMMER)
AVRDUDE_FLAGS = -v -p $(MCU) -b $(UPLOAD_RATE) -P $(AVRDUDE_PORT) \
	-c $(AVRDUDE_PROGRAMMER)
FORMAT = ihex 		# create a .hex file



# Program the device.  
upload: $(MYBIN)/$(TARGET).hex 
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH)


OPT = s			# assembly-level optimization

# Optional compiler flags.
#  -g:        generate debugging information (for GDB, or for COFF conversion)
#  -O*:       optimization level
#  -f...:     tuning, see gcc manual and avr-libc documentation
#  -Wall...:  warning level
#  -Wa,...:   tell GCC to pass this to the assembler.
#    -ahlms:  create assembler 	listing
CFLAGS = -g -O$(OPT) \
-funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums \
-Wall -Wstrict-prototypes \
-DF_CPU=$(F_CPU) \
-Wa,-adhlns=$(<:.c=.lst) \
-mmcu=$(MCU)


# Set a "language standard" compiler flag.
CFLAGS += -std=gnu99


# Optional assembler flags.
#  -Wa,...:   tell GCC to pass this to the assembler.
#  -ahlms:    create listing
#  -gstabs:   have the assembler create line number information; note that
#             for use in COFF files, additional information about filenames
#             and function names needs to be present in the assembler source
#             files -- see avr-libc docs [FIXME: not yet described there]
ASFLAGS = -Wa,-adhlns=$(MYBIN)/$(<:.S=.lst),-gstabs 


# Optional linker flags.
#  -Wl,...:   tell GCC to pass this to linker.
#  -Map:      create map file
#  --cref:    add cross reference to  map file
LDFLAGS = -Wl,-Map=$(MYBIN)/$(TARGET).map,--cref



# Define programs and commands.
SHELL = sh

CC = avr-gcc

OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE = avr-size

REMOVE = rm -f
COPY = cp

# Define Messages
# English
MSG_ERRORS_NONE = Errors: none
MSG_BEGIN = -------- begin --------
MSG_END = --------  end  --------
MSG_SIZE_BEFORE = Size before: 
MSG_SIZE_AFTER = Size after:
MSG_FLASH = Creating load file for Flash:
MSG_EXTENDED_LISTING = Creating Extended Listing:
MSG_SYMBOL_TABLE = Creating Symbol Table:
MSG_LINKING = Linking:
MSG_COMPILING = Compiling:
MSG_ASSEMBLING = Assembling:
MSG_CLEANING = Cleaning project:


# Define all object files.
OBJ = $(SRC:.c=.o) $(ASRC:.S=.o) 

# Define all listing files.
LST = $(ASRC:.S=.lst) $(SRC:.c=.lst)


# Combine all necessary flags and optional flags.
# Add target processor to flags.
#ALL_CFLAGS = -I$(LIB_SRC) -I$(GLOBAL_SHARED_INCLUDE)  $(CFLAGS)
#ALL_ASFLAGS = -mmcu=$(MCU) -I$(LIB_SRC)  -I$(GLOBAL_SHARED_INCLUDE) -x assembler-with-cpp $(ASFLAGS)
ALL_CFLAGS = $(CFLAGS)
ALL_ASFLAGS = -mmcu=$(MCU) -x assembler-with-cpp $(ASFLAGS)


# Eye candy.
# AVR Studio 3.x does not check make's exit code but relies on
# the following magic strings to be generated by the compile job.
begin:
	@echo
	@echo $(MSG_BEGIN)

finished:
	@echo $(MSG_ERRORS_NONE)

end:
	@echo $(MSG_END)
	@echo



# Display compiler version information.
gccversion : 
	@$(CC) --version


# Create final output files (.hex) from ELF output file.
$(MYBIN)/%.hex : $(MYBIN)/%.elf
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@

# Link: create ELF output file from object files.
.SECONDARY : $(TARGET).elf
.PRECIOUS : $(OBJ)


$(MYBIN)/%.elf: $(MYBIN)/%.o  
	@echo
	@echo $(MSG_LINKING) $@
		$(CC) $(ALL_CFLAGS)  $<  $(LDFLAGS) --output $@ 

	
#$(MYBIN)/%.elf: $(MYBIN)/%.o  
#	@echo
#	@echo $(MSG_LINKING) $@
#		$(CC) $(ALL_CFLAGS)  $<  $(LIB_BIN)/timer0.o $(LIB_BIN)/uart.o  $(LIB_BIN_GLOBAL)/swarm_messaging.o $(LDFLAGS) -o $@ 




# Compile: create object files from C source files.
$(MYBIN)/%.o : $(MYSRC)/%.c $(MYSRC)/include/timer0.h $(MYSRC)/timer0.c
	@echo
	@echo $(MSG_COMPILING) $<
	$(CC) $(ALL_CFLAGS) -c $<  -o $@ 

#$(MYBIN)/%.o : $(MYSRC)/%.c $(GLOBAL_SHARED_INCLUDE)/swarm_messaging.h $(GLOBAL_SHARED_INCLUDE)/packet_type.h $(LIB_SRC)/timer0.h  $(LIB_SRC)/uart.h 
#	@echo
#	@echo $(MSG_COMPILING) $<
#	$(CC) $(ALL_CFLAGS) -c $< -o $@


# Target: clean project.
clean: begin clean_list finished end

clean_list :
	@echo
	@echo $(MSG_CLEANING)
	$(REMOVE) $(MYBIN)/*.hex
	$(REMOVE) $(MYBIN)/*.lst
	$(REMOVE) $(MYBIN)/*.obj
	$(REMOVE) $(MYBIN)/*.elf
	$(REMOVE) $(MYBIN)/*.o

# Listing of phony targets.
.PHONY : all begin finish end \
	clean clean_list program

